global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def in_itemize(snip):
    # find using searchpairpos('\begin{itemize}','','\end{itemize}','bnWz')
    beginpos = vim.eval("searchpairpos('\\\\begin{itemize}','','\\\\end{itemize}','bnWz')")
    endpos   = vim.eval("searchpairpos('\\\\begin{itemize}','','\\\\end{itemize}', 'nWz')")
    curpos   = snip.cursor.to_vim_cursor()
    if beginpos == ['0','0'] or endpos == ['0','0']: return False
    if posCompare(beginpos, curpos) < 0 and posCompare(curpos, endpos) < 0:
        return True
    else:
        return False

def posCompare(cur1, cur2):
    """ returns -1 if cur1 is before cur2, +1 if after, and 0 if cur1==cur2
        cur1, cur2 are required to be lists of the form [row,col]
    """
    cur1r = int(cur1[0])
    cur1c = int(cur1[1])
    cur2r = int(cur2[0])
    cur2c = int(cur2[1])
    if   cur1r < cur2r: return -1
    elif cur1r > cur2r: return  1
    else:
        if   cur1c < cur2c: return -1
        elif cur1c > cur2c: return  1
        else: return 0

endglobal

snippet tmw "Tomorrow" iA
# `!p snip.rv = vim.eval('strftime("%m/%d/%Y", localtime() + 86400)')`
- [ ] Cleared Anki
- [ ] Added to Anki
`!p
import datetime
snip.rv = ''
# Saturday tasks
if (datetime.datetime.now() + datetime.timedelta(days=1)).weekday() == 5:
    snip.rv += '- [ ] Created weekly plan\n'
    snip.rv += '- [ ] Watered plants\n'
    snip.rv += '- [ ] Grocery shopping\n'
# Gym
if (datetime.datetime.now() + datetime.timedelta(days=1)).weekday() in [0, 1, 3, 4, 5]:
    snip.rv += '- [ ] Gym\n'
`
$0
endsnippet

snippet hl "Horizontal line" bA
---
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mc "Code" iA
\`\`\`${1:py}
${2:${VISUAL}}
\`\`\`
$0
endsnippet

snippet fnt "Footnote" bA
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

snippet dl "Disclosure" A
<details open="">
  <summary>$1</summary>
  $2
</details>
$0
endsnippet

snippet mk "Math" iA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`
endsnippet

priority 1000
snippet lnk "Link" iA
[$1](${2:link})$0
endsnippet

snippet cd "Code" iA
\`\`\`python
$1
\`\`\`
$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet == "equals" iA
&= $1
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix}$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right|$0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

context "math()"
snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right]$0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sum "sum" iA
\sum_{$1}^{$2} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet inf "\infty" iA
\infty
endsnippet

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet nb "nabla" iA
\nabla$0
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet NN "n" iA
\N
endsnippet

context "math()"
snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet cases "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 10
context "math()"
snippet "~" "widetilde" riA
\widetilde{$1}$0
endsnippet

priority 10
context "math()"
snippet "til" "widetilde" riA
\widetilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet bs "boldsymbol" iA
\boldsymbol{$1}$0
endsnippet

snippet sec "Section" bA
# ${1:Section Name}
endsnippet

snippet sub "SubSection" bA
## ${1:Section Name}
endsnippet

snippet sbb "Subsubsection" bA
### ${1:Section Name}
endsnippet

snippet par "Paragraph" bA
#### ${1:Paragraph Name}
endsnippet

snippet spar "Paragraph" bA
##### ${1:Paragraph Name}
endsnippet

snippet bf "Bold Font" A
**$1**$2
endsnippet

snippet itl "Italics" A
_$1_$2
endsnippet

snippet eqn "Equation" bA
$$
${1}
$$
$0
endsnippet

snippet bk "Break" iA
<br>$0
endsnippet

context "math()"
snippet mb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet mc "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet sig "Sigma" iA
\sigma
endsnippet

context "math()"
snippet \1 "Identity" iA
\mathds{1}
endsnippet

context "math()"
snippet ip "Inner Product" iA
\langle $1, $2 \rangle$0
endsnippet

snippet todo  "todo" A
\todo[inline, color=gray!40]{$1}
endsnippet

snippet TODO "TODO" A
\todo[inline, color=orange]{TODO: $1}
endsnippet

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet mx "max" iA
\max_{$1}$0
endsnippet

context "math()"
snippet mn "min" iA
\min_{$1}$0
endsnippet

context "math()"
snippet ui "underline i" iA
_{i}$0
endsnippet

context "math()"
snippet uj "underline j" iA
_{j}$0
endsnippet

context "math()"
snippet uk "underline k" iA
_{k}$0
endsnippet

context "math()"
snippet opt "optimal" iA
^{*}$0
endsnippet

context "math()"
snippet up "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet br "brackets" iA
\\{$1\\}$0
endsnippet

context "math()"
snippet txt "text" iA
\text{$1}$0
endsnippet

snippet anki "anki" iA
> **_${1:NOTE:}_** <br>
$2<br>$0
endsnippet

snippet clz "cloze" iA
> $1

$0
endsnippet

context "math()"
snippet prp "propto" iA
\propto 
endsnippet

context "math()"
snippet app "approx" iA
\approx 
endsnippet

snippet ckls "checklist" iA
- [ ] $1
endsnippet
